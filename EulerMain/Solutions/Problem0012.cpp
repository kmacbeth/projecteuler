#include "Problem0012.h"
#include "Libs/DivisorFunction.h"

namespace Euler {

    /**
     * Problem: Highly divisible triangular number
     *
     * The sequence of triangle numbers is generated by adding the natural numbers.
     * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
     * ten terms would be:
     *
     *                1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     *
     * Let us list the factors of the first seven triangle numbers:
     *
     *   1: 1
     *   3: 1,3
     *   6: 1,2,3,6
     *  10: 1,2,5,10
     *  15: 1,3,5,15
     *  21: 1,3,7,21
     *  28: 1,2,4,7,14,28
     *
     * We can see that 28 is the first triangle number to have over five divisors.
     *
     * What is the value of the first triangle number to have over five hundred
     * divisors?
     */
    void Problem12::Solve()
    {
        const uint64_t kMaxDivisors = 500;
        uint64_t numDivisors = 0;
        uint64_t result = 0;

        // The Divisor Function of 0th power gives the total number of divisors,
        // we only need to subtract 1.
        EulerLib::DivisorFunction divisorFunc;

        for (uint64_t n = 1000; numDivisors <= kMaxDivisors; ++n)
        {
            // Reference: https://en.wikipedia.org/wiki/Triangular_number
            result = (n * (n + 1)) >> 1;

            numDivisors = divisorFunc(result, 0) - 1;
        }

        SetAnswer(result);
    }

}
